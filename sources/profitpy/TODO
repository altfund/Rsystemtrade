== TODO for 0.2 ==

micro:

1.  covert standard item models to profit.models.BasicItemModel where
    possible; remove all session.maps objects and references.

2.  clean up signals and slots where possible

3.  fix method request/tickerId/contract handling.

4.  extend tickers display with contract details.


macro:

1.  add viewable historical data requests and plots

2.  finish strategy design tool and its integration with the workbench

3.  write the README (this file) and release the code


== 0.3 and Beyond ==

1.  add csv tick data import/export

2.  add commands and dialogs for remaining tws request functions

3.  fix bugs, like the zoom bugs

4.  add peer-to-peer discovery and trade data exchange

5.  finish neural network design tool and its integration


Model Usage Survey
==================


accountdisplay.py
    AccountTableModel(QStandardItemModel)
        on_session_UpdateAccountValue
	    -> adds message values to local dict (called "items")

    AccountDisplay
        connect(session, Signals.createdAccountData, newPlotSeries)
        connect(model, Signals.standardItemChanged, plot.on_controlsTree_itemChanged)
        connect(model, Signals.rowsInserted, self.updateModelItems)

centraltabs.py
    CentralTabs(QTabWidget)
        connect(app, Signals.itemActivated, self.createTab)
	connect(app, Signals.openUrl, self.createTab)
        connect(app, Signals.tickerClicked, self.createTab)

executionsdisplay.py
	ExecutionsTableModel(QAbstractTableModel)
            on_session_ExecDetails
	        > adds message index to local list (called "messageIndexes")
	ExecutionsDisplay

plotdatadialog.py
    CurveDataTableModel(QAbstractTableModel)

portfoliodisplay.py
	PortfolioDisplay ->
            on_session_UpdatePortfolio -> updates self.portfolioTable

sessiontree.py
    SessionTreeModel(QStandardItemModel)
        on_strategy_createdTicker
        on_session_createdTicker

    SessionTree
        connect(self, Signals.openUrl, app, Signals.openUrl)
        connect(self, Signals.itemActivated, app, Signals.itemActivated)

strategydisplay.py
    StrategyDisplayModel(QStandardItemModel)
    StrategyDisplay
        connect(model, Signals.itemChanged,
                self.on_strategyTable_itemChanged)
        connect(view.selectionModel(), Signals.selectionChanged,
                self.on_strategyTable_selectionChanged)
        connect(self, Signals.strategy.requestActivate,
                instance(), Signals.strategy.requestActivate)
