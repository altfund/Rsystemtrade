#!/usr/bin/env python
""" ib_login_helper -> key sending script for automated TWS logins.

Requires the guitest_ module.

.. _guitest:  http://code.enthought.com/enstaller/eggs/source/enthought.guitest-2.0.0.tar.gz
"""
import logging
import optparse
import os
import sys
import time


exit_codes = {False:255, True:0,}


class defaults:
    daemon = False
    forever = False
    nice = 19
    password = 'demouser'
    title = 'Login'
    username = 'edemo'
    verbose = False
    wait = 60


def daemonize(stdin='/dev/null', stdout='/dev/null', stderr='/dev/null'):
    """

    from http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/66012
    """
    try:
        pid = os.fork()
        if pid > 0:
            sys.exit(0)
    except (OSError, ), e:
        sys.stderr.write('fork #1 failed: (%d) %s\n' % (e.errno, e.strerror))
        sys.exit(1)
    os.chdir('/')
    os.umask(0)
    os.setsid()
    try:
        pid = os.fork()
        if pid > 0:
            sys.exit(0)
    except (OSError, ), e:
        sys.stderr.write('fork #2 failed: (%d) %s\n' % (e.errno, e.strerror))
        sys.exit(1)
    stdin = file(stdin, 'r')
    stdout = file(stdout, 'a+')
    stderr = file(stderr, 'a+', 0)
    os.dup2(stdin.fileno(), sys.stdin.fileno())
    os.dup2(stdout.fileno(), sys.stdout.fileno())
    os.dup2(stderr.fileno(), sys.stderr.fileno())


def options(args=None):
    if args is None:
        args = sys.argv[1:]

    defformat = ' [default:%default]'
    parser = optparse.OptionParser(version='%prog 0.2')
    add_option = parser.add_option

    add_option('-d', '--daemon', dest='daemon',
                      help='detach from terminal',
                      action='store_true',
                      default=defaults.daemon)

    add_option('-f', '--forever', dest='forever',
                      help='loop forever',
                      action='store_true',
                      default=defaults.forever)

    add_option('-v', '--verbose', dest='verbose',
                      help='echo progress to stdout',
                      action='store_true',
                      default=defaults.verbose)

    add_option('-n', '--nice', dest='nice', metavar='NICE',
                      help='process niceness.' + defformat,
                      default=defaults.nice,
                      type='int')

    add_option('-p', '--password', dest='password', metavar='PASSWORD',
                      help='login password' + defformat,
                      default=defaults.password)

    add_option('-t', '--title', dest='title', metavar='TITLE',
                      help='title of window for which to wait' + defformat,
                      default=defaults.title)

    add_option('-u', '--username', dest='username', metavar='USERNAME',
                      help='login username' + defformat,
                      default=defaults.username)

    add_option('-w', '--wait', dest='wait', metavar='WAIT',
                      help='maximum seconds to wait for window' + defformat,
                      default=defaults.wait,
                      type='int')

    options, args = parser.parse_args()
    return options


def main(options):
    ## cannot import guitest in parent process
    import enthought.guitest as guitest

    if options.verbose:
        logging.basicConfig(level=logging.DEBUG,
                            format='%(asctime)s %(levelname)s %(message)s')
    try:
        nice = os.nice(options.nice)
    except (AttributeError, ):
        logging.warning('unable to set niceness.  bad os?')
    except (OSError, ):
        logging.error('unable to set niceness.  not root?')
    else:
        logging.debug('process nice %s', nice)

    result = True
    keys = list(options.username) + ['TAB'] + list(options.password) + ['ENT']

    while True:
        logging.debug('waiting %s seconds for window title "%s".',
                      options.wait, options.title)
        wids = guitest.WaitWindowViewable(options.title, wait=options.wait)
        if not wids:
            logging.debug('no window found.')
            result = False
        else:
            wid = wids[0]
            logging.debug('found window ids "%s", using first id %s.',
                          wids, wid)
            if not guitest.ClickWindow(wid):
                logging.debug('could not click window.')
                result = False
            else:
                logging.debug('input focus set successfully.')
                for key in keys:
                    time.sleep(0.125)
                    if not guitest.PressReleaseKey(key):
                        logging.debug('could not press key "%s".', key)
                        result = False
                if result:
                    logging.debug('sent all keys successfully.')
        if not options.forever:
            break
        else:
            time.sleep(5)
    return result


if __name__ == '__main__':
    opts = options()
    if opts.daemon:
        daemonize()
    res = None
    try:
        res = main(opts)
    except (KeyboardInterrupt, ):
        logging.debug('keyboard interrupt.')
    sys.exit(exit_codes.get(res, exit_codes[False]))
